{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "TypeScript と JavaScript の言語機能",
			"description": "JavaScript と TypeScript ファイルに豊富な言語サポートを提供。",
			"reloadProjects.title": "プロジェクトの再読み込み",
			"configuration.typescript": "TypeScript",
			"configuration.suggest.completeFunctionCalls": "パラメーター シグネチャを含む完全な関数。",
			"typescript.tsdk.desc": "使用する tsserver と lib*.d.ts ファイルが含まれているフォルダーのパスを指定します。",
			"typescript.disableAutomaticTypeAcquisition": "型の自動取得を無効にします。型の自動取得は、外部ライブラリの Intelliense を向上させるために npm から `@types` パッケージを取得します。",
			"typescript.tsserver.log": "ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.tsserver.pluginPaths": "Typescript 言語サービス プラグインを検出する追加のパス。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。",
			"typescript.tsserver.pluginPaths.item": "絶対または相対パスのいずれか。相対パスはワークスペース フォルダーに対して解決されます。",
			"typescript.tsserver.trace": "TS サーバーに送信されるメッセージのトレースを有効にします。このトレースは TS サーバーの問題を診断するために使用できます。トレースには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.validate.enable": "TypeScript の検証を有効/無効にします。",
			"typescript.format.enable": "既定の TypeScript フォーマッタを有効/無効にします。",
			"javascript.format.enable": "既定の JavaScript フォーマッタを有効/無効にします。",
			"format.insertSpaceAfterCommaDelimiter": "コンマ区切り記号の後のスペース処理を定義します。",
			"format.insertSpaceAfterConstructor": "コンストラクター キーワードの後にあるスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。",
			"format.insertSpaceAfterSemicolonInForStatements": " for ステートメント内のセミコロンの後のスペース処理を定義します。",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "2 項演算子の後のスペース処理を定義します。",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "制御フロー ステートメント内のキーワードの後のスペース処理を定義します。",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "匿名関数の関数キーワードの後のスペース処理を定義します。",
			"format.insertSpaceBeforeFunctionParenthesis": "関数の引数のかっこの前にあるスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "左右の空でないかっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "左右の空でない角かっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "左右の空でないかっこの間のスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以上を使用する必要があります。",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterTypeAssertion": "TypeScript の型アサーションの後のスペース処理を定義します。ワークスペースで TypeScript 2.4 以上を使用する必要があります。",
			"format.placeOpenBraceOnNewLineForFunctions": "新しい行に関数の始め波かっこを配置するかどうかを定義します。",
			"format.placeOpenBraceOnNewLineForControlBlocks": "新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。",
			"javascript.validate.enable": "JavaScript の検証を有効/無効にします。",
			"goToProjectConfig.title": "プロジェクト構成に移動",
			"javascript.referencesCodeLens.enabled": "JavaScript ファイル内で CodeLens の参照を有効/無効にします。",
			"typescript.referencesCodeLens.enabled": "TypeScript ファイルで CodeLens の参照を有効/無効にします。",
			"typescript.implementationsCodeLens.enabled": "CodeLens の実装を有効/無効にします。この CodeLens は interface の実装を表示します。",
			"typescript.openTsServerLog.title": "TS サーバーのログを開く",
			"typescript.restartTsServer": "TS サーバーを再起動",
			"typescript.selectTypeScriptVersion.title": "TypeScript のバージョンを選択...",
			"typescript.reportStyleChecksAsWarnings": "スタイル チェックを警告として報告します。",
			"javascript.implicitProjectConfig.checkJs": "JavaScript ファイルのセマンティック チェックを有効/無効にします。既存の jsconfig.json ファイルや tsconfig.json ファイルの設定はこれより優先されます。ワークスペースで TypeScript 2.3.1 以上を使用する必要があります。",
			"typescript.npm": "種類の自動的な取得に使用される NPM 実行可能ファイルへのパスを指定します。ワークスペースで TypeScript 2.3.4 以上を使用する必要があります。",
			"typescript.check.npmIsInstalled": "型定義の自動取得に NPM がインストールされているかどうかを確認します。",
			"configuration.suggest.names": "JavaScript の候補内でファイルから一意の名前を含むかどうかを有効/無効にします。",
			"typescript.tsc.autoDetect": "tsc タスクの自動検出を制御します。",
			"typescript.tsc.autoDetect.off": "この機能を無効にします。",
			"typescript.tsc.autoDetect.on": "ビルドとウォッチ、両方のタスクを作成します。",
			"typescript.tsc.autoDetect.build": "単一の実行コンパイルタスクのみを作成します。",
			"typescript.tsc.autoDetect.watch": "コンパイルタスクとウォッチタスクのみを作成します。",
			"typescript.problemMatchers.tsc.label": "TypeScript の問題",
			"typescript.problemMatchers.tscWatch.label": "TypeScript の問題 (ウォッチ モード)",
			"configuration.suggest.paths": "import ステートメントや require 呼び出しでパスの提案を有効/無効にします。",
			"typescript.locale": "JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。ワークスペースで TypeScript 2.6.0 以上を使用する必要があります。既定値の `null` では VS Code のロケールを使用します。",
			"javascript.implicitProjectConfig.experimentalDecorators": "プロジェクト外の JavaScript ファイルの `experimentalDecorators` を有効/無効にします。既存の jsconfig.json ファイルや tsconfig.json ファイルの設定はこれより優先されます。ワークスペースで Ty`eScript 2.3.1 以上を使用する必要があります。",
			"configuration.suggest.autoImports": "自動インポートの提案を有効/無効にします。ワークスペースで TypeScript 2.6.1 以上を使用する必要があります。",
			"taskDefinition.tsconfig.description": "TS ビルドを定義する tsconfig ファイル。",
			"javascript.suggestionActions.enabled": "エディター内で JavaScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。",
			"typescript.suggestionActions.enabled": "エディター内で TypeScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。",
			"typescript.preferences.quoteStyle": "クイック修正に使用するのに好ましい引用符のスタイル: `single` 引用符、`double` 引用符、既存の import から種類を推測する `auto`。ワークスペースで TypeScript 2.9 以上を使用する必要があります。",
			"typescript.preferences.importModuleSpecifier": "自動 import の優先パス スタイル。",
			"typescript.preferences.importModuleSpecifier.auto": "Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.",
			"typescript.preferences.importModuleSpecifier.relative": "ファイルの場所を基準にします。",
			"typescript.preferences.importModuleSpecifier.nonRelative": "`jsconfig.json` / `tsconfig.json` で構成されている `baseUrl` に基づきます。",
			"typescript.updateImportsOnFileMove.enabled": "VS Code で名前変更や移動したファイルのインポート パスの自動更新を有効/無効にします。ワークスペースで TypeScript 2.9 以上を使用する必要があります。",
			"typescript.updateImportsOnFileMove.enabled.prompt": "名前を変更するときに確認をします。",
			"typescript.updateImportsOnFileMove.enabled.always": "常に自動的にパスを更新します。",
			"typescript.updateImportsOnFileMove.enabled.never": "パスの名前を変更せず確認も行いません。",
			"typescript.autoClosingTags": "JSX タグの自動クローズを有効/無効にします。ワークスペースで TypeScript 3.0 以上を使用する必要があります。",
			"typescript.suggest.enabled": "オートコンプリートの提案を有効/無効にします。",
			"configuration.surveys.enabled": "VS Code の JavaScript と TypeScript のサポートを向上させるために、ときどき行われるアンケートを有効/無効にします。",
			"configuration.suggest.completeJSDocs": "JSDoc のコメントを完成させるための提案を有効/無効にします。",
			"typescript.preferences.renameShorthandProperties": "名前の変更時にオブジェクトの短縮形のプロパティ用にエイリアスを使用することを有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。"
		},
		"out/utils/versionStatus": {
			"typescriptVersion": "TypeScript: Version"
		},
		"out/utils/versionProvider": {
			"couldNotLoadTsVersion": "このパスでは TypeScript のバージョンを読み込むことができません",
			"noBundledServerFound": "VS Code の tsserver が適切に動作しないウイルス検出ツールなどの他アプリケーションにより削除されました。VS Code を再インストールしてください。"
		},
		"out/utils/versionPicker": {
			"useVSCodeVersionOption": "VS Code のバージョンを使用",
			"useWorkspaceVersionOption": "ワークスペースのバージョンを使用",
			"learnMore": "詳細を表示",
			"selectTsVersion": "JavaScript および TypeScript 言語の機能に使用する TypeScript バージョンを選択します"
		},
		"out/utils/typingsStatus": {
			"installingPackages": "より適した TypeScript IntelliSense に関するデータをフェッチしています",
			"typesInstallerInitializationFailed.title": "JavaScript 言語機能のための型定義ファイルをインストールできませんでした。NPM のインストールを確認するか、ユーザー設定で  'typescript.npm' を構成してください。詳細は [こちら]({0}) をクリックしてください。",
			"typesInstallerInitializationFailed.doNotCheckAgain": "今後表示しない"
		},
		"out/utils/surveyor": {
			"survey.checkJs.prompt": "JavaScript の [checkJs](https://code.visualstudio.com/Docs/languages/javascript#_type-checking) に対する VS Code のサポート改善にご協力ください! この機能を既にご利用している方の、感想について、簡単なアンケートへの協力をご検討頂けませんか?",
			"takeShortSurvey": "簡単なアンケートの実施",
			"remindLater": "後で通知する",
			"neverAgain": "JS/TS のアンケートを無効にする"
		},
		"out/utils/projectStatus": {
			"statusExclude": "TypeScript: Configure Excludes",
			"hintExclude": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、多数のファイルが含まれるフォルダーを除外します。例: {0}",
			"hintExclude.generic": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。",
			"large.label": "除外の構成",
			"hintExclude.tooltip": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。"
		},
		"out/utils/logger": {
			"channelName": "TypeScript"
		},
		"out/utils/api": {
			"invalidVersion": "無効なバージョン"
		},
		"out/features/updatePathsOnRename": {
			"renameProgress.title": "JS/TS インポートの更新を確認しています",
			"prompt": "移動したファイル: '{0}' に import を更新しますか?",
			"reject.title": "いいえ",
			"accept.title": "はい",
			"always.title": "常に Import を自動的に更新します",
			"never.title": "今後は Import を自動的に更新しません"
		},
		"out/features/task": {
			"buildTscLabel": "ビルド - {0}",
			"buildAndWatchTscLabel": "ウォッチ - {0}"
		},
		"out/features/rename": {
			"fileRenameFail": "ファイル名を変更中にエラーが発生しました"
		},
		"out/features/referencesCodeLens": {
			"oneReferenceLabel": "1 個の参照",
			"manyReferenceLabel": "{0} 個の参照"
		},
		"out/features/refactor": {
			"refactoringFailed": "リファクタリングを適用できませんでした。"
		},
		"out/features/quickFix": {
			"fixAllInFileLabel": "{0} (ファイルの中のすべてを修正する)"
		},
		"out/features/organizeImports": {
			"organizeImportsAction.title": "インポートを整理"
		},
		"out/features/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc コメント"
		},
		"out/features/implementationsCodeLens": {
			"oneImplementationLabel": "1 個の実装",
			"manyImplementationLabel": "{0} 個の実装"
		},
		"out/features/fixAll": {
			"autoFix.label": "自動修正"
		},
		"out/features/directiveCommentCompletions": {
			"ts-check": "JavaScript ファイルのセマンティック チェックを有効にします。 ファイルの先頭にある必要があります。",
			"ts-nocheck": "JavaScript ファイルのセマンティック チェックを無効にします。 ファイルの先頭にある必要があります。",
			"ts-ignore": "ファイルの次の行で @ts-check エラーを抑制します。"
		},
		"out/features/completions": {
			"selectCodeAction": "適用するコード アクションを選択",
			"acquiringTypingsLabel": "Typings の定義ファイルを取得中...",
			"acquiringTypingsDetail": "IntelliSense の Typings の定義ファイルを取得しています。",
			"autoImportLabel": "{0} から自動インポート"
		},
		"out/features/baseCodeLensProvider": {
			"referenceErrorLabel": "参照を判別できませんでした"
		},
		"out/commands/goToProjectConfiguration": {
			"typescript.projectConfigNoWorkspace": "TypeScript または JavaScript プロジェクトを使用するには、VS Code でフォルダーを開いてください",
			"typescript.projectConfigUnsupportedFile": "TypeScript または JavaScript のプロジェクトを判別できませんでした。サポートされていないファイルの種類です",
			"typescript.projectConfigCouldNotGetInfo": "TypeScript または JavaScript のプロジェクトを判別できませんでした",
			"typescript.noTypeScriptProjectConfig": "ファイルは TypeScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。",
			"typescript.noJavaScriptProjectConfig": "ファイルは JavaScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。",
			"typescript.configureTsconfigQuickPick": "tsconfig.json を構成する",
			"typescript.configureJsconfigQuickPick": "jsconfig.json を構成する"
		},
		"out/typescriptServiceClient": {
			"noServerFound": "パス {0} は、有効な tsserver インストールを指していません。バンドルされている TypeScript バージョンにフォールバックしています。",
			"serverExitedWithError": "TypeScript 言語サーバーがエラーで終了しました。エラー メッセージ: {0}",
			"typescript.openTsServerLog.notSupported": "TS サーバーのログには TS 2.2.2 以降が必要です",
			"typescript.openTsServerLog.loggingNotEnabled": "TS サーバーのログがオフになっています。ログを有効にするには、`typescript.tsserver.log` を設定して TS サーバーを再起動してください",
			"typescript.openTsServerLog.enableAndReloadOption": "ログを有効にして、TS サーバーを再起動する",
			"typescript.openTsServerLog.noLogFile": "TS サーバーはログを開始していません。",
			"openTsServerLog.openFileFailedFailed": "TS サーバーのログ ファイルを開くことができませんでした",
			"serverDiedAfterStart": "TypeScript 言語サービスは、開始直後に 5 回停止しました。サービスは再開されません。",
			"serverDiedReportIssue": "問題を報告",
			"serverDied": "TypeScript 言語サービスは、直前の 5 分間に 5 回、予期せずに停止しました。",
			"serverLoading.progress": "JS/TS 言語機能を初期化しています"
		}
	}
}